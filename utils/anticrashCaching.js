import Logger from './logs.js';
const lg = new Logger({ prefix: 'Bot' });

const CACHE_TTL = 10 * 60 * 1000; // 10 —Ö–≤–∏–ª–∏–Ω –∫–µ—à—É
const DELETE_LIMIT = 5; // –õ—ñ–º—ñ—Ç –¥—ñ–π –ø–µ—Ä–µ–¥ –ø–æ–∫–∞—Ä–∞–Ω–Ω—è–º

const Cache = {
    ChannelDelete: new Map(),
    ChannelCreate: new Map()
};

// üîç **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É**
export async function check_cache(type, user_id) {
    try {
        const cache = Cache[type];
        const cacheEntry = cache.get(user_id);

        if (cacheEntry && (Date.now() - cacheEntry.timestamp) < CACHE_TTL) {
            return cacheEntry.count;
        }

        cache.set(user_id, { count: 0, timestamp: Date.now() });
        return 0;
    } catch (error) {
        lg.error(`‚ùå check_cache (${type}): ` + error);
    }
}


export async function add_to_cache(type, guild, user_id, limit, reason) {
    try {
        const cache = Cache[type];
        let cacheEntry = cache.get(user_id);


        const updated_count = cacheEntry ? cacheEntry.count + 1 : 1;
        
      
        if (updated_count >= limit) {
            try {
                
                guild.members.kick(user_id, { reason }).catch(err => lg.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', err));

                lg.success(`‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á <@${user_id}> –∑–∞–±–∞–Ω–µ–Ω–∏–π. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);

              
                cache.delete(user_id);
            } catch (err) {
                lg.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–∫–∞—Ä–∞–Ω–Ω—è:', err);
            }

            return;
        }

        cache.set(user_id, { count: updated_count, timestamp: Date.now() });

    } catch (error) {
        lg.error(`‚ùå add_to_cache (${type}): ` + error);
    }
}


// ‚è≥ **–ê–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É**
setInterval(() => {
    const now = Date.now();
    for (const type in Cache) {
        const keysToDelete = [];
        for (const [user_id, cacheEntry] of Cache[type]) {
            if ((now - cacheEntry.timestamp) >= CACHE_TTL) {
                keysToDelete.push(user_id);
            }
        }
        keysToDelete.forEach(user_id => delete_from_cache(type, user_id));
    }
}, CACHE_TTL);

// ‚ùå **–í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –∫–µ—à—É**
export function delete_from_cache(type, user_id) {
    try {
        if (Cache[type].has(user_id)) {
            Cache[type].delete(user_id);
            lg.info(`üóë –í–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${user_id} –∑ –∫–µ—à—É (${type})`);
        }
    } catch (error) {
        lg.error(`‚ùå delete_from_cache (${type}): ` + error);
    }
}

// üîÑ **–§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –¥—ñ–π**
export async function channel_delete_cache_check(user_id) {
    return check_cache('ChannelDelete', user_id);
}

export async function add_channel_delete_to_cache(guild, user_id) {
    return add_to_cache('ChannelDelete', guild, user_id, DELETE_LIMIT, '–ê–Ω—Ç–∏-–∫—Ä–∞—à: –º–∞—Å–æ–≤–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤');
}

export async function channel_create_cache_check(user_id) {
    return check_cache('ChannelCreate', user_id);
}

export async function add_channel_create_to_cache(guild, user_id) {
    return add_to_cache('ChannelCreate', guild, user_id, DELETE_LIMIT, '–ê–Ω—Ç–∏-–∫—Ä–∞—à: –º–∞—Å–æ–≤–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤');
}

// üÜï **–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–µ—à—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤**
export async function delete_channel_create_cache(user_id) {
    delete_from_cache('ChannelCreate', user_id);
}
