import Logger from './logs.js';
const lg = new Logger({ prefix: 'Bot' });

const CACHE_TTL = 10 * 1000;//

class CacheManager {
    constructor(ttl = CACHE_TTL) {
        this.ttl = ttl;
        this.cache = new Map();

        setInterval(() => this.cleanup(), this.ttl);
    }

    // üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É
    check(guildId, user_id) {
        try {
            const cacheKey = `${guildId}-${user_id}`;
            const cacheEntry = this.cache.get(cacheKey);
            
            // –Ø–∫—â–æ –∫–µ—à —ñ—Å–Ω—É—î —ñ –Ω–µ –≤–∏–π—à–æ–≤ —Ç–µ—Ä–º—ñ–Ω TTL
            if (cacheEntry && (Date.now() - cacheEntry.timestamp) < this.ttl) {
                lg.debug(`–ö–µ—à –¥–ª—è ${cacheKey} —ñ—Å–Ω—É—î —ñ –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è ${cacheEntry.count}`);
                return cacheEntry.count;
            }
    
            lg.debug(`Cache entry for ${cacheKey} is expired or does not exist.`);
            
            // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–µ—à—É, —è–∫—â–æ –≤—ñ–Ω –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π
            this.cache.delete(cacheKey);
            
            return 0; // –Ø–∫—â–æ –∫–µ—à –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 0
        } catch (error) {
            lg.error(`‚ùå CacheManager.check: ${error}`);
        }
    }
    
    
    
    
    
    // ‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–µ—à
    add(guildId, user_id, limit, reason) {
        try {
            const cacheKey = `${guildId}-${user_id}`;
            let cacheEntry = this.cache.get(cacheKey);
    
            // –Ø–∫—â–æ –∫–µ—à—É –Ω–µ–º–∞—î ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
            if (!cacheEntry) {
                cacheEntry = { count: 0, timestamp: Date.now() };
                lg.debug(`–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –∫–µ—à –¥–ª—è ${cacheKey}`);
            }
    
            // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
            const updated_count = cacheEntry.count + 1;
    
            // –Ø–∫—â–æ –ª—ñ–º—ñ—Ç –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ –∫–µ—à
            if (updated_count >= limit) {
                lg.warn(`–õ—ñ–º—ñ—Ç –¥–æ—Å—è–≥–Ω—É—Ç–æ –¥–ª—è ${cacheKey}, –≤–∏–¥–∞–ª—è—é –∫–µ—à`);
                this.cache.delete(cacheKey); // –Ø–∫—â–æ –ª—ñ–º—ñ—Ç –¥–æ—Å—è–≥–Ω—É—Ç–æ, –≤–∏–¥–∞–ª—è—î–º–æ –∫–µ—à
                return;
            }
    
            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –∑ –Ω–æ–≤–∏–º –ª—ñ—á–∏–ª—å–Ω–∏–∫–æ–º —Ç–∞ —á–∞—Å–æ–≤–∏–º –º—ñ—Ç–∫–æ—é
            this.cache.set(cacheKey, { count: updated_count, timestamp: Date.now() });
            lg.debug(`–õ—ñ—á–∏–ª—å–Ω–∏–∫ –¥–ª—è ${cacheKey} –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ ${updated_count}`);
        } catch (error) {
            lg.error(`‚ùå CacheManager.add: ${error}`);
        }
    }
    
    
    
    

    // ‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –∫–µ—à—É

    delete(guildId, user_id) {
        try {
            const cacheKey = `${guildId}-${user_id}`; // –∫–æ–º–±—ñ–Ω—É—î–º–æ guildId —Ç–∞ user_id
            if (this.cache.has(cacheKey)) {
                this.cache.delete(cacheKey);
                lg.info(`üóë –í–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${user_id} –∑ –∫–µ—à—É –≥—ñ–ª—å–¥—ñ—ó ${guildId}`);
            } else {
                lg.warn(`üõë –ö–µ—à –¥–ª—è ${cacheKey} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.`);
            }
        } catch (error) {
            lg.error(`‚ùå CacheManager.delete: ${error}`);
        }
    }



    // ‚è≥ –ê–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É
    cleanup() {
        const now = Date.now();
        for (const [cacheKey, cacheEntry] of this.cache) {
            lg.warn(`–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É –¥–ª—è ${cacheKey} –∑ timestamp: ${cacheEntry.timestamp}`);
            
            const [guildId, user_id] = cacheKey.split('-');
            if (!guildId || !user_id) {
                lg.error(`‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç cacheKey: ${cacheKey}`);
                continue; // –Ø–∫—â–æ —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –π–æ–≥–æ
            }
    
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Ä–º—ñ–Ω—É –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ –∫–µ—à—É
            if ((now - cacheEntry.timestamp) >= this.ttl) {
                lg.warn(`–ö–µ—à –¥–ª—è ${cacheKey} –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π, –≤–∏–¥–∞–ª—è—é.`);
                if (this.cache.has(cacheKey)) {
                    this.delete(guildId, user_id);  // –í–∏–¥–∞–ª—è—î–º–æ –∫–µ—à, —è–∫—â–æ –≤—ñ–Ω —â–µ –Ω–µ –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π
                }
            }
        }
    }
    
    

}

// üîπ **–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–ª–∞—Å—É –¥–ª—è –∫–µ—à—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤**
const channelDeleteCache = new CacheManager();
const channelCreateCache = new CacheManager();
const roleCreateCache = new CacheManager();
const roleDeleteCache = new CacheManager();

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–µ—à–µ–º (–¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É)
export const channel_delete_cache_check = (guildId, user_id) => channelDeleteCache.check(guildId, user_id);
export const add_channel_delete_to_cache = (guildId, user_id) => channelDeleteCache.add(guildId, user_id, 5, '–ê–Ω—Ç–∏-–∫—Ä–∞—à: –º–∞—Å–æ–≤–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤');
export const delete_channel_delete_cache = (guildId, user_id) => channelDeleteCache.delete(guildId, user_id);

export const channel_create_cache_check = (guildId, user_id) => channelCreateCache.check(guildId, user_id);
export const add_channel_create_to_cache = (guildId, user_id) => channelCreateCache.add(guildId, user_id, 5, '–ê–Ω—Ç–∏-–∫—Ä–∞—à: –º–∞—Å–æ–≤–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤');
export const delete_channel_create_cache = (guildId, user_id) => channelCreateCache.delete(guildId, user_id);

export const add_role_delete_to_cache = (guildId, user_id) => roleDeleteCache.add(guildId, user_id, 5, '–ê–Ω—Ç–∏-–∫—Ä–∞—à: –º–∞—Å–æ–≤–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–ª–µ–π');
export const check_role_delete_cache = (guildId, user_id) => roleDeleteCache.check(guildId, user_id);
export const delete_role_delete_cache = (guildId, user_id) => roleDeleteCache.delete(guildId, user_id);

export const add_role_create_to_cache = (guildId, user_id) => roleCreateCache.add(guildId, user_id, 5, '–ê–Ω—Ç–∏-–∫—Ä–∞—à: –º–∞—Å–æ–≤–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–ª–µ–π');
export const check_role_create_cache = (guildId, user_id) => roleCreateCache.check(guildId, user_id);
export const delete_role_create_cache = (guildId, user_id) => roleCreateCache.delete(guildId, user_id);