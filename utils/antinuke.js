import Logger from './logs.js';
const lg = new Logger({ prefix: 'Bot' });

const CACHE_TTL = 10 * 60 * 1000; // 10 —Ö–≤–∏–ª–∏–Ω –∫–µ—à—É

class CacheManager {
    constructor(ttl = CACHE_TTL) {
        this.ttl = ttl;
        this.cache = new Map();

        setInterval(() => this.cleanup(), this.ttl);
    }

    // üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É
    check(user_id) {
        try {
            const cacheEntry = this.cache.get(user_id);
            if (cacheEntry && (Date.now() - cacheEntry.timestamp) < this.ttl) {
                return cacheEntry.count;
            }
            this.cache.set(user_id, { count: 0, timestamp: Date.now() });
            return 0;
        } catch (error) {
            lg.error(`‚ùå CacheManager.check: ${error}`);
        }
    }

    // ‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–µ—à
    async add(guild, user_id, limit, reason) {
        try {
            lg.debug(user_id)
            let cacheEntry = this.cache.get(user_id);
            const updated_count = cacheEntry ? cacheEntry.count + 1 : 1;

            if (updated_count >= limit) {
                await guild.members.kick(user_id, { reason })
                    .catch(err => lg.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', err));

                lg.success(`‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á <@${user_id}> –∑–∞–±–∞–Ω–µ–Ω–∏–π. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
                this.cache.delete(user_id);
                return;
            }

            this.cache.set(user_id, { count: updated_count, timestamp: Date.now() });
        } catch (error) {
            lg.error(`‚ùå CacheManager.add: ${error}`);
        }
    }

    // ‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –∫–µ—à—É
    delete(user_id) {
        try {
            if (this.cache.has(user_id)) {
                this.cache.delete(user_id);
                lg.info(`üóë –í–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${user_id} –∑ –∫–µ—à—É`);
            }
        } catch (error) {
            lg.error(`‚ùå CacheManager.delete: ${error}`);
        }
    }

    // ‚è≥ –ê–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É
    cleanup() {
        const now = Date.now();
        for (const [user_id, cacheEntry] of this.cache) {
            if ((now - cacheEntry.timestamp) >= this.ttl) {
                this.delete(user_id);
            }
        }
    }
}

// üîπ **–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–ª–∞—Å—É –¥–ª—è –∫–µ—à—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤**
const channelDeleteCache = new CacheManager();
const channelCreateCache = new CacheManager();
const roleUpdateCache = new CacheManager();

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–µ—à–µ–º (–¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É)
export const channel_delete_cache_check = (user_id) => channelDeleteCache.check(user_id);
export const add_channel_delete_to_cache = (guild, user_id) => channelDeleteCache.add(guild, user_id, 5, '–ê–Ω—Ç–∏-–∫—Ä–∞—à: –º–∞—Å–æ–≤–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤');
export const delete_channel_delete_cache = (user_id) => channelDeleteCache.delete(user_id);

export const channel_create_cache_check = (user_id) => channelCreateCache.check(user_id);
export const add_channel_create_to_cache = (guild, user_id) => channelCreateCache.add(guild, user_id, 5, '–ê–Ω—Ç–∏-–∫—Ä–∞—à: –º–∞—Å–æ–≤–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤');
export const delete_channel_create_cache = (user_id) => channelCreateCache.delete(user_id);

export const add_role_update_to_cache = (guild, user_id) => roleUpdateCache.add(guild, user_id, 5, '–ê–Ω—Ç–∏-–∫—Ä–∞—à: –º–∞—Å–æ–≤–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–ª–µ–π');
export const check_role_update_cache = (guild, user_id) => roleUpdateCache.check(user_id);
export const delete_role_update_cache = (guild, user_id) => roleUpdateCache.delete(user_id);