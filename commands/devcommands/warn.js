const { SlashCommandBuilder } = require('@discordjs/builders');
const { EmbedBuilder } = require('discord.js');
const Warning = require('../../Schemas/userSchema'); // –®–ª—è—Ö –¥–æ —Å—Ö–µ–º–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
require('dotenv').config();
const SUPPORT_SERVER_ID = process.env.SUPPORT_SERVER_ID;
const MOD_ROLE_ID = process.env.MOD_ROLE_ID;
const DEV_ROLE_ID = process.env.DEV_ROLE_ID;
const { delete_cache } = require('../../utils/userWarningsCaching');

const Logger = require('../../utils/logs');
lg = new Logger('Bot');
module.exports = {
	data: new SlashCommandBuilder()
		.setName('warn')
		.setDescription('–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–¥–∞—á—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É')
		.addStringOption(option =>
			option.setName('user_id')
				.setDescription('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —è–∫–æ–º—É –≤–∏–¥–∞—î—Ç—å—Å—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è')
				.setRequired(true),

		)
		.addStringOption(option =>
			option.setName('reason')
				.setDescription('–ü—Ä–∏—á–∏–Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è')
				.setRequired(true)
				.addChoices(
					{ name: '‚ö† –†–µ–∫–ª–∞–º–∞ —Å–µ—Ä–≤–µ—Ä—ñ–≤', value: 'spam links' },
					{ name: 'ü§ñ –ö—Ä–∞—à –±–æ—Ç', value: 'crash bot' },
					{ name: 'üß® –ö—Ä–∞—à —Å–µ—Ä–≤–µ—Ä—ñ–≤', value: 'crashing guild' },
					{ name: 'üõ† –†–æ–∑—Ä–æ–±–∫–∞/—Ä–µ–∫–ª–∞–º–∞ –∫—Ä–∞—à —Å–æ—Ñ—Ç—É', value: 'crash bot/crash soft develop' },
					{ name: 'üßå –†—É—Å–Ω—è', value: 'russian' },
					{ name: '–†–µ–π–¥ —Å–µ—Ä–≤–µ—Ä—ñ–≤', value: 'raider' },
				),
		)
		.addStringOption(option =>
			option.setName('proofs')
				.setDescription('–î–æ–∫–∞–∑–∏ –ø–æ—Ä—É—à–µ–Ω–Ω—è')
				.setRequired(true),
		),


	async execute(interaction) {
		const role = interaction.guild.roles.cache.get(MOD_ROLE_ID);
		if (interaction.guild.id == SUPPORT_SERVER_ID) {

			if (interaction.member.roles.cache.get(MOD_ROLE_ID) || interaction.member.roles.cache.get(DEV_ROLE_ID)) {
				try {

					const target = interaction.options.getString('user_id');


					let targetWarns = await Warning.findOne({ _id: target });
					if (!targetWarns) {
						targetWarns = new Warning({ _id: target, warns: 0 });
					}

					const date = new Date();
					const formatted_date = date.toLocaleString();
					const reason = interaction.options.getString('reason');

					targetWarns.warns += 1;
					targetWarns.reasons.push({
						author_id: interaction.user.id,
						reason: reason,
						proofs: interaction.options.getString('proofs'),
						timestamp: formatted_date,
					});

					await targetWarns.save();
					const user_id = target;
					delete_cache(user_id);
					await interaction.reply(`–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ! –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: ${targetWarns.warns}`);
				}
				catch (error) {
					lg.error(error);
				}
			}
		}
		else {
			return;
		}

	},
};
