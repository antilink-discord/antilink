import { SlashCommandBuilder } from 'discord.js';
import util from 'util';
import Guild from '../../Schemas/guildSchema.js';
import User from '../../Schemas/userSchema.js'
export const data = new SlashCommandBuilder()
    .setName('eval')
    .setDescription('–í–∏–∫–æ–Ω–∞—Ç–∏ JavaScript-–∫–æ–¥')
    .addStringOption(option =>
        option.setName('code')
            .setDescription('–ö–æ–¥ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è')
            .setRequired(true)
    );

export async function execute(interaction) {
    const allowedUserId = '558945911980556288';

    if (interaction.user.id !== allowedUserId) {
        return interaction.reply({ content: '‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!', ephemeral: true });
    }

    const code = interaction.options.getString('code');
    await interaction.deferReply({ ephemeral: true });

    try {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–¥—É
        const context = {
            // –ú–æ–¥–µ–ª—ñ
            Guild,
            User,
            
            // –û–±'—î–∫—Ç–∏ Discord
            interaction,
            client: interaction.client,
            channel: interaction.channel,
            guild: interaction.guild,
            
            // –£—Ç–∏–ª—ñ—Ç–∏
            util,
            
            // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ
            db: interaction.client.db || null,
            
            // –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
        };

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        const asyncFunc = async (context) => {
            const { Guild, interaction, client, db, ...rest } = context;
            try {
                return await eval(code);
            } catch (e) {
                return Promise.reject(e);
            }
        };

        // –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–¥
        const result = await asyncFunc(context);

        // –§–æ—Ä–º–∞—Ç—É—î–º–æ –≤–∏–≤—ñ–¥
        const output = util.inspect(result, { 
            depth: 2,
            maxStringLength: 500,
            colors: false
        });

        await interaction.editReply({
            content: `üì• **–ö–æ–¥:**\n\`\`\`js\n${code}\n\`\`\`\nüì§ **–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n\`\`\`js\n${output.slice(0, 1900)}\n\`\`\``
        });
    } catch (error) {
        await interaction.editReply({
            content: `‚ùå **–ü–æ–º–∏–ª–∫–∞:**\n\`\`\`js\n${error.stack || error}\n\`\`\``
        });
    }
}