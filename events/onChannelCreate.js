import { Events } from 'discord.js';
import 'dotenv/config';
import Logger from '../utils/logs.js';
import { add_channel_create_to_cache, channel_create_cache_check } from '../utils/anticrashCaching.js';
import Guild from '../Schemas/guildSchema.js';

const lg = new Logger();

const GuildCache = new Map();
const MemberCache = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5 —Ö–≤–∏–ª–∏–Ω
const CREATE_LIMIT = 3; // –õ—ñ–º—ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω—å –ø–µ—Ä–µ–¥ –ø–æ–∫–∞—Ä–∞–Ω–Ω—è–º

export default {
    name: Events.ChannelCreate,
    once: false,
    async execute(channel) {
        setImmediate(async () => {
            try {
                const guildId = channel.guild.id;
                let cachedGuildData = GuildCache.get(guildId);

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à –≥—ñ–ª—å–¥—ñ—ó
                if (!cachedGuildData || (Date.now() - cachedGuildData.timestamp) > CACHE_TTL) {
                    const guildData = await Guild.findOne({ _id: guildId }).lean();
                    if (guildData) {
                        cachedGuildData = { guildData, timestamp: Date.now() };
                        GuildCache.set(guildId, cachedGuildData);
                    } else {
                        return;
                    }
                }

                // if (!cachedGuildData?.guildData?.antiCrashMode) return;

                // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à —Å—Ç–≤–æ—Ä–µ–Ω—å + –ª–æ–≥
                await Promise.all([
                    // guild_channel_create_log(guildId, channel.id, channel.name),
                    add_channel_create_to_cache(channel.guild, channel.id)
                ]);

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∫—ñ–ª—å–∫–∏ –∫–∞–Ω–∞–ª—ñ–≤ –≤—ñ–Ω —Å—Ç–≤–æ—Ä–∏–≤
                const createCount = await channel_create_cache_check(channel.id);

                // –ü–æ–∫–∞—Ä–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç
                if (createCount >= CREATE_LIMIT) {
                    await freezeUser(channel.guild, channel.id);
                    // await guild_channel_create_log(guildId, channel.id, createCount);
                }

            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É:', error);
            }
        });
    },
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø–æ—Ä—É—à–Ω–∏–∫–∞ (timeout –∞–±–æ ban –∑–∞–º—ñ—Å—Ç—å –∫—ñ–∫–∞)
export async function freezeUser(guild, channelId) {
    try {
        const channel = guild.channels.cache.get(channelId);
        if (!channel) {
            lg.info('–ö–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.');
            return;
        }

        // –Ø–∫—â–æ –±–æ—Ç –º–∞—î –ø—Ä–∞–≤–æ ‚Äî –¥–∞—î–º–æ timeout –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω
        if (channel.deletable) {
            await channel.delete('–ê–Ω—Ç–∏–∫—Ä–∞—à: –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤')
                .catch(e => lg.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–∞–Ω–∞–ª—É:', e));

            lg.success(`‚ùÑÔ∏è –ö–∞–Ω–∞–ª ${channel.name} –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π!`);
        }
        // –Ø–∫—â–æ –±–æ—Ç –º–∞—î –ø—Ä–∞–≤–æ –±–∞–Ω–∏—Ç–∏
        else if (guild.members.me.permissions.has('KICK_MEMBERS')) {
            await channel.delete({ reason: '–ê–Ω—Ç–∏–∫—Ä–∞—à: –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤' })
                .catch(e => lg.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±–∞–Ω—ñ:', e));

            lg.success(`üö® –ö–∞–Ω–∞–ª ${channel.name} –∑–∞–±–∞–Ω–µ–Ω–∏–π!`);
        }
        // –Ø–∫—â–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ –Ω—ñ—á–æ–≥–æ –∑—Ä–æ–±–∏—Ç–∏
        else {
            lg.warn('‚ùå –ë–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–æ–∫–∞—Ä–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É.');
        }

    } catch (error) {
        lg.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ñ –∫–∞–Ω–∞–ª—É:', error);
    }
}
