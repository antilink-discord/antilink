import { Events, AuditLogEvent } from 'discord.js';
import 'dotenv/config';
import { guild_channel_delete_log, guild_admin_frozen_log } from '../utils/guildLogs.js';
import Logger from '../utils/logs.js';
import { 
    add_channel_delete_to_cache, 
    channel_delete_cache_check,
    delete_channel_delete_cache
} from '../utils/antinuke.js';
import Guild from '../Schemas/guildSchema.js';

const lg = new Logger();

const GuildCache = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5 —Ö–≤–∏–ª–∏–Ω
const DELETE_LIMIT = 3; // –õ—ñ–º—ñ—Ç –≤–∏–¥–∞–ª–µ–Ω—å –ø–µ—Ä–µ–¥ –ø–æ–∫–∞—Ä–∞–Ω–Ω—è–º

export default {
    name: Events.ChannelDelete,
    once: false,
    async execute(channel) {
        setImmediate(async () => {
            try {
                const guildId = channel.guild.id;
                let cachedGuildData = GuildCache.get(guildId);

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à –≥—ñ–ª—å–¥—ñ—ó
                if (!cachedGuildData || (Date.now() - cachedGuildData.timestamp) > CACHE_TTL) {
                    const guildData = await Guild.findOne({ _id: guildId }).lean();
                    lg.debug('–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≥—ñ–ª—å–¥—ñ—é');
                    if (guildData) {
                        cachedGuildData = { guildData, timestamp: Date.now() };
                        GuildCache.set(guildId, cachedGuildData);
                    } else {
                        return lg.error('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ü—ñ—î—ó –≥—ñ–ª—å–¥—ñ—ó.');
                    }
                }

                // –Ø–∫—â–æ –≥—ñ–ª—å–¥—ñ—è –º–∞—î antiCrashMode —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π, –∑–¥—ñ–π—Å–Ω—é—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥—ñ—ó
                if (!cachedGuildData?.guildData?.antiCrashMode) {
                    return lg.error('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω—Ç–∏–∫—Ä–∞—à—É.');
                }

                // –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–≥–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É
                const fetchedLogs = await channel.guild.fetchAuditLogs({
                    type: AuditLogEvent.ChannelDelete,
                    limit: 1
                }).catch(() => null);

                if (!fetchedLogs) {
                    lg.warn('–ù–µ–º–∞—î –ª–æ–≥—ñ–≤ –∞—É–¥–∏—Ç—É –¥–ª—è —Ü—å–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É.');
                    return;
                }

                const logEntry = fetchedLogs.entries.first();
                if (!logEntry || Date.now() - logEntry.createdTimestamp > 5000) {
                    lg.warn('–õ–æ–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ —Å—Ç–∞—Ä–∏–π.');
                    return;
                }

                // –û—Ç—Ä–∏–º—É—î–º–æ executor (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π –≤–∏–¥–∞–ª–∏–≤ –∫–∞–Ω–∞–ª)
                const executor = logEntry.executor;
                if (!executor) {
                    lg.warn('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ª–æ–≥—ñ–≤.');
                    return;
                }

                // –û—Ç—Ä–∏–º—É—î–º–æ —É—á–∞—Å–Ω–∏–∫–∞, —è–∫–∏–π –≤–∏–∫–æ–Ω–∞–≤ –¥—ñ—é
                let member = channel.guild.members.cache.get(executor.id) || await channel.guild.members.fetch(executor.id).catch(() => null);

                lg.debug(`member:`, member)
                if (!member) {
                    lg.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫–∞.');
                    return;
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ–∑–≤–æ–ª–µ–Ω—É —Ä–æ–ª—å
                const memberRoles = member.roles.cache; // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                const guildData = await Guild.findOne({ _id: channel.guild.id });
                const whitelist_data = guildData?.antinuke_whitelist ?? [];
                
                lg.info(whitelist_data)
                lg.info(`user_roles:`, memberRoles)
                
                const hasWhitelistedRole = memberRoles.some(role => whitelist_data.includes(role.id)) || member.id == channel.guild.ownerId;
                lg.info('hasWhitelistedRole?', hasWhitelistedRole)

                if (hasWhitelistedRole) {
                    lg.info('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –¥–æ–∑–≤–æ–ª–µ–Ω—É —Ä–æ–ª—å, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.');
                    return; // –Ø–∫—â–æ –º–∞—î –¥–æ–∑–≤–æ–ª–µ–Ω—É —Ä–æ–ª—å, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ–¥–∞–ª—å—à–∏—Ö –¥—ñ–π
                } else {
                    lg.warn('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î –¥–æ–∑–≤–æ–ª–µ–Ω–æ—ó —Ä–æ–ª—ñ.');
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –≤–∏–¥–∞–ª–µ–Ω—å + –ª–æ–≥
                await Promise.all([ 
                    guild_channel_delete_log(guildId, executor.id, channel.name),
                    add_channel_delete_to_cache(channel.guild, executor.id)
                ]);

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∫—ñ–ª—å–∫–∏ –∫–∞–Ω–∞–ª—ñ–≤ –≤—ñ–Ω –≤–∏–¥–∞–ª–∏–≤
                const deleteCount = await channel_delete_cache_check(executor.id);

                // –ü–æ–∫–∞—Ä–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç
                if (deleteCount >= DELETE_LIMIT) {
                    if (!isTimedOut(member)) {
                        await freezeUser(channel.guild, executor.id);
                    }
                    await guild_admin_frozen_log(guildId, executor.id, deleteCount);

                    await delete_channel_delete_cache(executor.id);
                }

            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É:', error);
            }
        });
    }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø–æ—Ä—É—à–Ω–∏–∫–∞ (timeout –∞–±–æ ban –∑–∞–º—ñ—Å—Ç—å –∫—ñ–∫–∞)
export async function freezeUser(guild, userId) {
    try {
        const member = guild.members.cache.get(userId) || await guild.members.fetch(userId).catch(() => null);
        if (!member) {
            lg.warn('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –∞–±–æ –≤–∂–µ –ø–æ–∫–∏–Ω—É–≤ —Å–µ—Ä–≤–µ—Ä.');
            return;
        }

        if (!guild.members.me.permissions.has('KICK_MEMBERS')) {
            lg.warn('‚ùå –ë–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤–∞ –∫—ñ–∫–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.');
            return;
        }

        if (member.roles.highest.position >= guild.members.me.roles.highest.position) {
            lg.warn('‚ùå –ë–æ—Ç –Ω–µ –º–æ–∂–µ –∫—ñ–∫–Ω—É—Ç–∏ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –æ—Å–∫—ñ–ª—å–∫–∏ –π–æ–≥–æ —Ä–æ–ª—å –≤–∏—â–∞ –∞–±–æ —Ä—ñ–≤–Ω–∞.');
            return;
        }

        await member.kick({ reason: '–ê–Ω—Ç–∏–∫—Ä–∞—à: –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –≤–∏–¥–∞–ª–µ–Ω—å –∫–∞–Ω–∞–ª—ñ–≤' })
            .then(() => lg.success(`üö® –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${member.user.tag} –∑–∞–±–∞–Ω–µ–Ω–∏–π!`))
            .catch(err => lg.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±–∞–Ω—ñ:', err));

    } catch (error) {
        lg.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
    }
}